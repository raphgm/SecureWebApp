name: Secure CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # üîç SAST (CodeQL)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test --configuration Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # üì¶ Dependency Review (only on pull requests)
      - name: Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4

      # üöÄ Deploy to staging (only on push to main)
      - name: Azure Login
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      # üèóÔ∏è Setup Terraform
      - name: Setup Terraform
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      # üèóÔ∏è Terraform Init
      - name: Terraform Init
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd infra
          terraform init

      # üèóÔ∏è Terraform Validate
      - name: Terraform Validate
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd infra
          terraform validate

      # üèóÔ∏è Terraform Plan
      - name: Terraform Plan
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd infra
          
          # Import existing resources if they don't exist in state - use || true to continue on errors
          echo "Importing existing Azure resources..."
          terraform import azurerm_resource_group.main /subscriptions/$(az account show --query id -o tsv)/resourceGroups/${{ secrets.AZURE_RG }} || true
          terraform import azurerm_linux_web_app.main /subscriptions/$(az account show --query id -o tsv)/resourceGroups/${{ secrets.AZURE_RG }}/providers/Microsoft.Web/sites/${{ secrets.AZURE_WEBAPP_NAME }} || true
          terraform import azurerm_service_plan.main /subscriptions/$(az account show --query id -o tsv)/resourceGroups/${{ secrets.AZURE_RG }}/providers/Microsoft.Web/serverFarms/SecurePlan || true
          
          # Import Key Vault - always try since it might exist
          echo "Importing Key Vault..."
          terraform import azurerm_key_vault.main /subscriptions/$(az account show --query id -o tsv)/resourceGroups/${{ secrets.AZURE_RG }}/providers/Microsoft.KeyVault/vaults/${{ secrets.KV_NAME }} || true
          
          # Import staging slot - always try since it might exist
          echo "Importing staging slot..."
          terraform import azurerm_linux_web_app_slot.staging /subscriptions/$(az account show --query id -o tsv)/resourceGroups/${{ secrets.AZURE_RG }}/providers/Microsoft.Web/sites/${{ secrets.AZURE_WEBAPP_NAME }}/slots/staging || true
          
          # Import Key Vault secret with version - get the secret ID with version
          echo "Importing Key Vault secret..."
          SECRET_ID=$(az keyvault secret show --vault-name ${{ secrets.KV_NAME }} --name DbPassword --query id -o tsv 2>/dev/null || echo "")
          if [ -n "$SECRET_ID" ]; then
            terraform import azurerm_key_vault_secret.db_password "$SECRET_ID" || true
          fi
          
          echo "Running terraform plan..."
          terraform plan -out=tfplan

      # üèóÔ∏è Terraform Apply
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd infra
          terraform apply -auto-approve tfplan

      - name: Deploy to staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          slot-name: staging
          package: .

      # ‚úÖ Health Check
      - name: Health check staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          for i in {1..10}; do
            curl -fs https://${{ secrets.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net && break
            sleep 10
          done

      # üîí DAST (OWASP ZAP)
      - name: OWASP ZAP Scan
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: https://${{ secrets.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net
          fail_action: false

      # üîë Validate Key Vault
      - name: Validate Key Vault Secret
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          SECRET=$(az keyvault secret show \
            --vault-name ${{ secrets.KV_NAME }} \
            --name DbPassword \
            --query value -o tsv)
          if [ -z "$SECRET" ]; then
            echo "‚ùå Failed to retrieve secret from Key Vault"
            exit 1
          else
            echo "‚úÖ Successfully retrieved secret from Key Vault"
          fi

      # üëÄ Manual approval
      - name: Await approval before production swap
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ secrets.APPROVERS }}
          minimum-approvals: 1
          issue-title: "Deploy to Production"
          issue-body: "Please approve or deny the deployment to production"

      # üîÑ Swap staging ‚Üí production
      - name: Swap to production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          az webapp deployment slot swap \
            -g ${{ secrets.AZURE_RG }} \
            -n ${{ secrets.AZURE_WEBAPP_NAME }} \
            --slot staging --target-slot production